openapi: 3.0.2
info:
  version: 'v1'
  title: '${project.name}'
  description: | 
    ${project.description}
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '${config:openapi.serverurl}'
    description: 'Version 1'

paths:

  /import/zip:
    post:
       tags:
        - '${project.name}'
       summary: 'Import records from ZIP file with records. Each file in the zip-file is a xml-document for single records. Record format METS with mods. Record  ID from the record is <mods:identifier>. Record ID in storage will be origin:uuid-extracted-from<mods:identifier>'
       
       operationId: importFromZip
       requestBody:
         content:
           multipart/form-data:
             schema:
              type: object
              properties:               
                datasource:
                  type: string
                fileName:
                  type: string
                  format: binary
       
       responses:
        '200':
          description: Returns a list of filenames of records that failed.
          content:
            application/json:
              schema:           
                type: array
                items:
                 type: string      


  /oai/config:
    get:
      tags:
        - '${project.name}'
      summary: 'Retrieve list of configured OAI-PMH targets'
      operationId: getOaiTargetsConfiguration
      responses:
        '200':
          description: 'The full list of configured OAI-PMH targets will all parameters. The name is the key used when starting a new import.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OaiTargetList'


  /oai/import/full:
    get:
      tags:
        - '${project.name}'
      summary: 'Start full ingest of a OAI target into DS-storage. From time will be 1900-01-01. When called the job will finished if no errors are encountered even if the socket is closed from the client triggering the call. After full ingest ds-storage will be called again and all older recorders from before the ingest fill be deleted.'
      operationId: oaiIngestFull
      parameters:
        - name: oaiTarget
          in: query
          description: 'Name of the oai target to start full import. '
          required: true
          schema:
            type: string
            enum: ["${config:oaiTargets[*].name}"]
      responses:
        '200':
          description: OK. Returns total number of records ingested.
          content:
            application/json:
              schema:
                type: integer
                format: int32      

  /oai/import/delta:
    get:
      tags:
        - '${project.name}'
      summary: 'Start delta import of a OAI-target. From time will be the datestamp of the last record imported for that OAI target. When the import has finished it will update the datestamp. When called the job will finished if no errors are encountered even if the socket is closed from the client triggering the call.'
      operationId: oaiIngestDelta
      parameters:
        - name: oaiTarget
          in: query
          description: 'Name of the oai target to start delta import'
          required: true
          schema:            
            type: string
            enum: ["${config:oaiTargets[*].name}"]
      responses:
        '200':
          description: OK. Returns total number of records ingested.
          content:
            application/json:
              schema:
                type: integer
                format: int32
                
               
                
  /solr/index:
    get:
      tags:
        - '${project.name}'
      summary: 'Will start indexing workflow that will read records from ds-storage, xslt transform them in ds-present and post the documents to solr.'
      operationId: indexSolr
      parameters:
        - name: origin
          in: query
          description: 'Will call ds-present for solr-records that will be posted to solr. Origin must be defined in the ds-present configuration'
          required: true
          schema:
            type: string
            enum: ["${config:present.origins[*]}"]        
        - name: type
          in: query
          description: |
                        The type of index. If value is "FULL" then all records from storage will be transformed to solr 
                        documents and indexed. If value is "DELTA" then only records from ds-storage with an mTime newer
                        than the last date_modified in the solr index will be fetched, transformed and indexed.
          schema:
            $ref: '#/components/schemas/IndexType'


      responses:
        '200':
          description: OK.
          content:
            application/json:
              schema:
                type: object
                example:
                  combinedQTime: 103200
                  allDocumentsIndexed: 200
                  lastSolrResponseHeader:
                    rf: 1
                    status: 0
                    QTime: 1200

  /enrichment/manifestations:
    get:
      tags:
        - '${project.name}'
      summary: 'Will fetch records from storage without child ID and fetch the ID from preservica.'
      operationId: updatePreservicaManifestation
      parameters:
        - name: origin
          in: query
          description: 'Origin to fetch manifestations for'
          required: true
          schema:
            type: string
            enum: [ "${config:present.origins[*]}" ]
        - name: mTimeFrom
          in: query
          description: 'Start from records modified after mTimeFrom. Default will be 0 and will index all records from that origin. Format is milliseconds since Epoch with 3 added digits'
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK. Returns total number of records updated
          content:
            application/json:
              schema:
                type: integer
                format: int64
                

  /enrichment/kalturaIds:
    get:
      tags:
        - '${project.name}'
      summary: 'Update the referenceId to KalturaID mapping table in ds-storage. Whem mapping is completed it will apply the mapping to records missing kalturaId'
      operationId: updateKalturaIds
      parameters:
        - name: origin
          in: query
          description: 'Origin to update kaltura mapping for'
          required: true
          schema:
            type: string
            enum: [ "${config:present.origins[*]}" ]
        - name: mTimeFrom
          in: query
          description: 'Start from records modified after mTimeFrom. Format is milliseconds since Epoch with 3 added digits'
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK. Returns total number of mappings update in ds-storage
          content:
            application/json:
              schema:
                type: integer
                format: int64

  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string

  # Note that status is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Health check + list of running and past jobs'
      operationId: status
      responses:
        '200':
          description: 'Health check + List of jobs both running and completed since server start. Sorted by most recent jobs first. Still running jobs first'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string


  /monitor/jobs:
    get:
      tags:
        - Service
      summary: 'List of running and past jobs'
      operationId: jobs
      responses:
        '200':
          description: 'List of jobs both running and completed since server start. Sorted by most recent jobs first. Still running jobs first'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DsDathandlerJobList'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  /monitor/whoami:
    get:
      tags:
        - Service
      summary: 'Extract OAuth2 accessToken in the `Authorization` HTTP header and return the roles from it'
      operationId: probeWhoami
      security:
        - KBOAuth:
          - public
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'

components:
  schemas:

    # Basic status response component.
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'
        gitCommitChecksum:
          type: string
          description: 'The checksum of the deployed commit.'
          example: 'ca82a6dff817ec66f44342007202690a93763949'
        gitBranch:
          type: string
          description: 'The current deployed branch.'
          example: master
        gitClosestTag:
          type: string
          description: 'The closest tag of the deployed branch.'
        gitCommitTime:
          type: string
          description: 'The time for the latest commit of the deplyed branch.'

    OaiTargetList:
      type: array
      items: 
        $ref: '#/components/schemas/OaiTarget'


    OaiTarget:
      type: object
      required:
        - name
        - url
        - set
        - metadataprefix
        - datasource
      properties:
        name:
          type: string
          description: 'Name of the OAI target.'
          example: 'kb.images.billed.hca'
        url:
          type: string
          description: 'Base URL to the OAI server.'                
          example: 'http://www5.kb.dk/cop/oai/'
        set:
          type: string
          description: 'Optional OAI parameter to specify which collection to harvest.'                
          example: 'oai:kb.dk:images:billed:2014:jun:hca'
        metadataprefix:
          type: string
          description: 'Specify for the dataformat. Some OAI servers can return data in different formats.'                
          example: 'mods'
        username:
          type: string
          description: 'User name if the OAI server require basic authentication'                
        password:
          type: string
          description: 'Password if the OAI server require basic authentication'                
        datasource:
          type: string
          description: |
            A datasource defines where the OAI harvester has harvested the data from.
            The datasource must be configured in ds-storage.
            For most targets, the datasource gets used as the direct origin in DS-Storage. However, some datasources may
            be split into multiple origins. An example of this are records harvested from preservica, where radio and tv
            are harvested from one datasource, but are put into their own respective origin in DS-storage.
          example: 'kb.images.billed.hca'
        decription:
          type: string
          description: 'Human readable name for the collection.'
          example: 'H.C. Andersen'
        filter:
          type: string
          enum:  ['direct', 'dr', 'preservica']
          description: |
            Records from different OAI-PMH targets contain different kinds of metadata. Therefore some special handling
            of records are required. Possible value are:
            * `direct`:     No special handling
            * `dr`:         The DR filter applies to metadata harvested from Preservica. However this filter only lets 
                            records with value starting with DR in the PBcore field publisher. This ensures that only 
                            material from DR gets injected into the backing DS-Storage.
            * `preservica`: When a record is harvested from the newest version (7) of a Preservica system, this filter
                            should be applied. Here, StructuralObjects are removed and InformationObjects need to have 
                            a PBCore tag inside of them to be added to storage.
          example: 'direct'
          default: 'direct'
        dateStampFormat:
          type: string
          enum:  ['date', 'datetime']
          description: |
            Special handling of record. Possible value are
            * `date`:     Only use format yyyy-MM-dd as from/until parameters
            * `datetime`:    Use UTC format yyyy-MM-ddThh:mm:ssZ as from/until parameters. This is default.                        
          example: 'date'
          default: 'date'
        fragmentServiceUrl:
          type: string
          description: BaseURL for the enrichment fragment service
          example: 'http://example.com/'

    DsDatahandlerJob:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 'System time in millis when job was started'     
        name:
          type: string
          description: 'Name of the job'
        type:
          type: string
          description: 'Type of job. Can be OAI or different enrichment jobs'
        from:
          type: string          
          description: 'Some jobs can be started from a given mTime or date.'
        status:
          type: string
          description: 'RUNNING or COMPLETED. Status COMPLETED can have failed and will be marked with error.'              
        startedTime:
          type: string
          description: 'Format YYYY-MM-DD HH:MM:SS'                   
        completedTime:
          type: string
          description: 'Format YYYY-MM-DD HH:MM:SS'
        numberOfRecords:
          type: integer
          format: int32
          description: 'Number of processed records. This may not be available for all jobs.'
        error:
          type: boolean
          description: 'If true the job did not complete and not all record was harvested'
                       
    DsDathandlerJobList:
      type: array
      items: 
        $ref: '#/components/schemas/DsDatahandlerJob'

    IndexType:
      type: string
      enum:
        - FULL
        - DELTA
      example: 'FULL'
      default: 'FULL'

    Whoami:
      type: object
      description: 'OAuth2 information derived from the request'
      properties:
        token:
          type: object
          required:
            - present
          properties:
            present:
              type: boolean
              description: 'True if an OAuth2 accessToken was present in the request, else false'
              example: true
            valid:
              type: boolean
              description: 'True is an OAuth2 accessToken was present and valid, else false'
              example: false
            error:
              type: string
              description: 'If the accessToken is not valid, the reason will be stated here'
            roles:
              type: array
              items:
                type: string
              description: 'The roles stated in the OAuth2 accessToken'
              example: [read, write, admin]

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

                    
  securitySchemes:

    KBOAuth:
      type: oauth2
      description: 'This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)'
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          #authorizationUrl is not used. Instead it uses keycloak url from yaml property file aegis-devel.
          #If we figure out what this is supposed to be used for, inject the value from yaml file  ${config.yaml.path}           
          authorizationUrl: https://api.example.com/oauth2/authorize 
          scopes:
            generic_ds: 'Scope used for all Digitale Samlinger services'
            # Project specific roles
            read: 'read data'
            write: 'modify or delete data'

            # General roles at the Royal Danish Library
            devel: 'broad read access'
            admin: 'all rights'

            # Meta role controlling authorization behaviour
            public: 'allowed for all, authorization optional, implementation behaviour depending on caller roles'
            any: 'allowed for all, authorization mandatory, implementation behaviour depending on caller roles'
