<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>dk.kb.dsparent</groupId>
        <artifactId>ds-parent</artifactId>
        <version>3.0.1-SNAPSHOT</version>
    </parent>

    <name>ds-datahandler-parent</name> <!-- Human readable name, uppercase and spaces welcome -->
    <groupId>dk.kb.datahandler</groupId>
    <artifactId>ds-datahandler-parent</artifactId>
    <version>3.0.3-SNAPSHOT</version>
    <packaging>pom</packaging>
    <description>
        # Ds-datahandler(Digitale Samlinger) by the Royal Danish Library.

        ## Notice
        OAI-PMH harvest is just the first implementation feature in ds-datahandler. More features will implemented later.

        ## OAI harvest
        Ds-datahandler can harvest OAI from different OAI-PMH targets and ingest the metadata for the records into ds-storage.
        Having the metadata in ds-storage makes access much easier and faster for other applications. The metadata for each
        record will be UTF-8 encoded before ingested into ds-storage. Invalid XML encoding characters will be replaced or removed.


        ## OAI targets configuration
        The project yaml-file contains the configuration for each OAI-PMH target.

        **The below table describes the parameters to configure a OAI-PMH target**

        | Property         | Description                                                                                               |
        | ---------------- | ----------------------------------------------------------------------------------------------------------|
        | name             | The name used to specify when starting a new import                                                       |
        | url              | The base url to OAI-PMH service                                                                           |
        | set              | Parameter to the OAI-server if the server has multiple collections (optional)                             |
        | metadataPrefix   | Parameter to the OAI-server to specify the format for the metadata. Options depend on the OAI target.     |
        | user             | User if the OAI-server require basic authentication (optional)                                            |
        | password         | Password if the OAI-server require basic authentication (optional)                                        |
        | origin           | The origin when sending records from this OAI target to ds-storage.                                       |
        |                  | The origin must be configured in DS-storage. ID will be {origin}:{id in OAI record}                       |
        | description      | Human text to give further description if needed                                                          |

        ## Full import and delta import
        For each OAI target configured you can request a full import or a delta import from the OAI collection. A full import will
        harvest all records from to OAI target. A delta import will only import records with a datestamp later than the last record
        recieved in either an earlier full import or delta import.

        ## Storing last harvest datestamp
        The yaml property file specificed a folder on the filesystem to store the last datestamps for each OAI target.
        The file will only contain a single with an UTC timestamp identical to the last record successfully send ds-storage from
        that OAI target.

        ## Configure the yaml property file
        Besides all the OAI targets it must also definere the property for the folder to store the datestamps. Also the
        properties host,port,baseurl to the ds-storage server to submit the records to.

        ## More about the OAI-PMH protocol
        See: http://www.openarchives.org/OAI/openarchivesprotocol.html
    </description>

    <modules>
        <module>ds-datahandler-api</module>
        <module>ds-datahandler-web</module>
    </modules>

    <scm>
        <url>https://github.com/kb-dk/ds-datahandler</url>
        <connection>scm:git:git@github.com:kb-dk/ds-datahandler.git</connection>
        <developerConnection>scm:git:git@github.com:kb-dk/ds-datahandler.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <licenses>
        <!--SBForge stuff should have a license-->
        <license>
            <name>${license.name}</name>
            <url>${license.url}</url>
        </license>
    </licenses>

    <properties>
        <!-- Enable forbiddenapis plugin, do disable set to none -->
        <api.check.phase>process-test-classes</api.check.phase>
        <!--Specify the licenses here, so they can be picked up by openAPI-->
        <license.name>Apache License, Version 2.0</license.name>
        <license.url>https://www.apache.org/licenses/LICENSE-2.0.txt</license.url>
        <timestamp>${maven.build.timestamp}</timestamp>

        <project.package>dk.kb.datahandler</project.package>
    </properties>

    <dependencies>
        <dependency>
            <groupId>dk.kb.dsshared</groupId>
            <artifactId>ds-shared</artifactId>
            <version>3.0.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>dk.kb.util</groupId>
            <artifactId>kb-util</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents.core5</groupId>
            <artifactId>httpcore5</artifactId>
        </dependency>

        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
        </dependency>

        <!-- Apache CXF and servlet stuff -->
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http</artifactId>
            <scope>runtime</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.xml.ws/jaxws-api -->
        <dependency>
            <groupId>javax.xml.ws</groupId>
            <artifactId>jaxws-api</artifactId>
            <exclusions>
                <!-- Project has jakarta.xml.bind-api v. 2.3.3 from cxf-rt-transports-http-->
                <exclusion>
                    <groupId>javax.xml.bind</groupId>
                    <artifactId>jaxb-api</artifactId>
                </exclusion>
                <!-- Project has jakarta.annotation-api v.1.3.5 through KB-util dependency.-->
                <exclusion>
                    <groupId>javax.annotation</groupId>
                    <artifactId>javax.annotation-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
        </dependency>
        <!-- To get client generation to work -->
        <!-- https://mvnrepository.com/artifact/org.openapitools/openapi-generator -->
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>openapi-generator</artifactId>
            <exclusions>
                <exclusion>
                    <!-- The slf4j-simple logs to stderr and stdout, ignoring logback.xml -->
                    <artifactId>slf4j-simple</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description</artifactId>
        </dependency>
        <dependency>
            <!--For the openapi endpoint /openapi.json-->
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description-openapi-v3</artifactId>
        </dependency>
        <dependency>
            <!--For the swagger UI endpoint /api-docs?url=openapi.json-->
            <groupId>org.webjars</groupId>
            <artifactId>swagger-ui</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.keycloak</groupId>
            <artifactId>keycloak-core</artifactId>
        </dependency>

        <!-- openapitools dependency -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jaxrs</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.saxon</groupId>
            <artifactId>Saxon-HE</artifactId>
        </dependency>

        <!-- Logging dependencies -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>

        <!-- Unit test -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mock-server/mockserver-junit-jupiter -->
        <dependency>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-junit-jupiter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-solrj</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents.core5</groupId>
            <artifactId>httpcore5</artifactId>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <!--This ensures that the openapi_*.yaml have been filtered and copied to target/classes
                        BEFORE being used by the openapi generator above-->
                        <phase>generate-sources</phase>
                        <!--as both the openapi codegen and this execution happens at phase generate-sources, ensure
                        this happens first by having this placed above codegen in the pom-->
                        <goals>
                            <goal>resources</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>copy-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/jetty-res</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/jetty</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Plugin used to extract information on the current git setup.
     See: https://github.com/git-commit-id/git-commit-id-maven-plugin -->
            <plugin>
                <groupId>io.github.git-commit-id</groupId>
                <artifactId>git-commit-id-maven-plugin</artifactId>
                <version>7.0.0</version>
                <executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <phase>initialize</phase>
                    </execution>
                </executions>
                <configuration>
                    <includeOnlyProperties>
                        <includeOnlyProperty>git.commit.id</includeOnlyProperty>
                        <includeOnlyProperty>git.branch</includeOnlyProperty>
                        <includeOnlyProperty>git.closest.tag.name</includeOnlyProperty>
                        <includeOnlyProperty>git.commit.author.time</includeOnlyProperty>
                    </includeOnlyProperties>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
